library(RCurl); library(XML);library(plyr)
#' Get data for particular known ORCID ID's.
#'
#' @import RCurl XML plyr
#' @param orcid Orcid identifier(s), of the form XXXX-XXXX-XXXX-XXXX.
#' @param profile Bibliographic ("bio"), biographical ("works"), or
#' 		both ("both", the default).
#' @param url Base url for the Orcid API.
#' @examples \dontrun{
#' orcid_id(orcid = "0000-0002-9341-7985")
#' orcid_id(orcid = "0000-0003-1620-1408")
#' orcid_id(orcid = "0000-0002-9341-7985", profile="works")
#' ids <- c("0000-0003-1620-1408", "0000-0002-9341-7985")
#' orcid_id(orcid = ids)
#' }
#' @export
orcid_id <- function(orcid = NULL, profile = NULL, url = "http://pub.orcid.org/")
{
toget <- c("orcid", "creation-method", "completion-date", "submission-date",
"claimed", "email-verified", "given-names", "family-name", "external-id-orcid",
"external-id-common-name", "external-id-reference", "external-id-url")
doit <- function(x) {
if(!is.null(profile)){
temp <- match.arg(profile, choices=c("bio", "works", "profile"))
url2 <- paste(url, x, "/orcid-", temp, sep="")
} else
{ url2 <- paste(url, x, "/orcid-profile", sep="") }
out <- getURL(url2)
tt <- xmlParse(out)
# data
list_ <- compact(lapply(toget, function(y) xpathSApply(tt, paste("//x:",y,sep=""), namespaces="x", fun=xmlValue)))
removenull <- function(x){ ifelse(identical(x, list()), NA, x) }
list_2 <- lapply(list_, removenull)
list_3 <- list_2[!is.na(list_2)]
# data names
names_ <- compact(lapply(toget, function(y) xpathSApply(tt, paste("//x:",y,sep=""), namespaces="x", fun=xmlName)))
names_2 <- lapply(names_, removenull)
names_3 <- names_2[!is.na(names_2)]
names(list_3) <- names_3
data.frame(list_3)
}
ldply(orcid, doit)
}
orcid_id(orcid = "0000-0002-9341-7985")
orcid_id(orcid = "0000-0002-9341-7985", profile="works")
ids <- c("0000-0003-1620-1408", "0000-0002-9341-7985")
orcid_id(orcid = ids)
#' Search for ORCID ID's.
#'
#' @import RCurl XML plyr RJSONIO
#' @param query Search terms
#' @param start Result number to start on. Keep in mind that pages start at 0.
#' @param rows Numer of results to return.
#' @param qf ????
#' @param defType Query syntax. See Details for more.
#' @param recursive Keep drilling down until all records are retrieved for the
#' 		given query, default FALSE (logical). If recursive=TRUE, rows and start
#' 		parameters are ignored.
#' @details You can use any of the following within the query statement: given-names,
#' 		family-name, credit-name, other-names, email, grant-number, patent-number,
#' 		keyword, worktitle, digital-objectids, current-institution, affiliation-name,
#' 		current-primary-institution, text, or past-institution.
#'
#' 		More details on defType from Orcid: "All query syntaxes available in
#' 		SOLR 3.6 are supported, including Lucene (with Solr extensions) which is
#' 		the default, DisMax and Extended Dismax. For most users the default syntax
#' 		will work fine and no need worry about the difference between those three.
#' 		A range of sophisticated search engine features are available for those
#' 		who need them; several examples are shown below."
#' @examples \dontrun{
#' # Get a list of names and Orcid IDs matching a name query
#' orcid(query="carl+boettiger")
#' orcid(query="given-names:carl+AND+family-name:boettiger")
#'
#' # You can string together many search terms
#' orcid(query="johnson+cardiology+houston")
#'
#' # And use boolean operators
#' orcid("johnson+AND(caltech+OR+'California+Institute+of+Technology')")
#'
#' # And you can use start and rows arguments to do pagination
#' orcid("johnson+cardiology+houston", start = 2, rows = 3)
#'
#' # Use search terms, here family name
#' orcid("family-name:Sanchez", start = 4, rows = 6)
#'
#' # Use search terms, here...
#' orcid(query="Raymond", start=0, rows=10, defType="edismax")
#'
#' # Search by DOI
#' orcid("10.1087/20120404")
#'
#' # Search by text type
#' orcid("text:English")
#'
#' # Use the Orcid ID to search ScienceCard (http://sciencecard.org/)
#' fromJSON("http://sciencecard.org/api/v3/users/0000-0002-1642-628X?info=summary")
#'
#' # Use case of disambiguating names from a list of similar names
#' # safe_orcid <- plyr::failwith(NULL, orcid)
#' # out <- plosauthor(terms = 'johnson', fields = 'title,author', limit = 100)
#' # uniquenames <- unique(str_trim(unlist(sapply(as.character(out[,2]), function(x) strsplit(x, ",")[[1]], USE.NAMES=F))),"both")
#' # registerDoMC(cores=4)
#' # outnames <- llply(uniquenames, safe_orcid, .parallel=T)
#' # outnames_df <- ldply(outnames)[,1:5]
#' # str(outnames_df)
#' # outnames_df[order(outnames_df$`given-names`),]
#' }
#' @export
orcid <- function(query = NULL, qf = NULL, start = NULL, rows = NULL,
defType = NULL, recursive = FALSE)
{
url = "http://pub.orcid.org/search/orcid-bio"
url2 <- paste0(url, "/?q=", query)
args <- compact(list(httpAccept = 'application/orcid+xml',
qf = qf, start = start, rows = rows,
defType = defType))
out <- getForm(url2, .params = args)
tt <- xmlParse(out)
toget <- c("orcid", "creation-method", "completion-date", "submission-date",
"claimed", "email-verified", "given-names", "family-name", "external-id-orcid",
"external-id-common-name", "external-id-reference", "external-id-url")
all <- xmlToList(tt)[[1]]
out <- llply(all, function(x) unlist(x, recursive=T))
namefields <- function(x){
temp <- sapply(strsplit(names(x), "\\."), function(y) y[length(y)])
ttt <- data.frame(t(x))
names(ttt) <- temp
ttt
}
out2 <- llply(out, namefields)
df <- do.call(rbind.fill, out2)
df[order(df$`relevancy-score`, decreasing=F),]
}
orcid(query="carl+boettiger")
orcid(query="given-names:carl+AND+family-name:boettiger")
orcid(query="johnson+cardiology+houston")
orcid("johnson+AND(caltech+OR+'California+Institute+of+Technology')")
orcid("johnson+cardiology+houston", start = 2, rows = 3)
orcid("family-name:Sanchez", start = 4, rows = 6)
orcid(query="Raymond", start=0, rows=10, defType="edismax")
orcid("10.1087/20120404")
fromJSON("http://sciencecard.org/api/v3/users/0000-0002-1642-628X?info=summary")
library(RJSONIO)
fromJSON("http://sciencecard.org/api/v3/users/0000-0002-1642-628X?info=summary")
setwd("~")
fields <- read.csv("fields.csv")
fields
setwd("~/github/ropensci/rorcid")
setwd("~/github/ropensci/rorcid/data")
save(fields, file="fields.rda")
library(roxygen2)
rplos <- "/Users/scottmac2/github/ropensci/rorcid"
rorcid <- "/Users/scottmac2/github/ropensci/rorcid"
rorcid <- "/Users/scottmac2/github/ropensci/rorcid"
roxygenise(rorcid)
install_github("rorcid", "ropensci")
library(rorcid)
data()
data(fields)
fields
setwd("~")
fields <- read.csv("fields.csv")
fields
setwd("~/github/ropensci/rorcid/data")
save(fields, file="fields.rda")
roxygenise(rorcid)
library(roxygen2)
rorcid <- "/Users/scottmac2/github/ropensci/rorcid"
roxygenise(rorcid)
install(rorcid)
library(rorcid)
rm(fields)
data(fields)
fields
orcid(defType = "edismax", query = "Raymond", qf = "given-names^1.0%20family-name^2.0", start = 0, rows = 10)
defType = "edismax"; query = "Raymond"; qf = "given-names^1.0%20family-name^2.0"; start = 0; rows = 10
url = "http://pub.orcid.org/search/orcid-bio"
url2 <- paste0(url, "/?q=", query)
url2
args <- compact(list(httpAccept = 'application/orcid+xml',
qf = qf, start = start, rows = rows,
defType = defType))
args
out <- getForm(url2, .params = args)
defType = "edismax"; query = "Raymond"; qf = "given-names^1.0 family-name^2.0"; start = 0; rows = 10
args <- compact(list(httpAccept = 'application/orcid+xml',
qf = qf, start = start, rows = rows,
defType = defType))
args
out <- getForm(url2, .params = args)
ou
out
tt <- xmlParse(out)
tt
orcid(defType = "edismax", query = "Raymond", qf = "given-names^1.0 family-name^2.0", start = 0, rows = 10)
orcid(query = "Raymond", start = 0, rows = 10)
orcid(query="keyword:ecology")
orcid(query="keyword:ecology", bq = "macroecology^1.0")
orcid <- function(query = NULL, start = NULL, rows = NULL, recursive = FALSE,
defType = NULL, qf = NULL, bq = NULL)
{
url = "http://pub.orcid.org/search/orcid-bio"
url2 <- paste0(url, "/?q=", query)
args <- compact(list(httpAccept = 'application/orcid+xml',
start = start, rows = rows,
defType = defType, qf = qf, bq = bq))
out <- getForm(url2, .params = args)
tt <- xmlParse(out)
toget <- c("orcid", "creation-method", "completion-date", "submission-date",
"claimed", "email-verified", "given-names", "family-name", "external-id-orcid",
"external-id-common-name", "external-id-reference", "external-id-url")
all <- xmlToList(tt)[[1]]
out <- llply(all, function(x) unlist(x, recursive=T))
namefields <- function(x){
temp <- sapply(strsplit(names(x), "\\."), function(y) y[length(y)])
ttt <- data.frame(t(x))
names(ttt) <- temp
ttt
}
out2 <- llply(out, namefields)
df <- do.call(rbind.fill, out2)
df[order(df$`relevancy-score`, decreasing=F),]
}
orcid(query="keyword:ecology", bq = "macroecology^1.0")
orcid(query="ecology", qf = "macroecology^2.0")
orcid(query="ecology", bq = "macroecology^2.0")
orcid(query="ecology", qf = "keyword^1.0")
orcid(query="keyword:ecology", qf = "keyword^1.0")
orcid <- function(query = NULL, start = NULL, rows = NULL, recursive = FALSE,
defType = NULL, qf = NULL, bq = NULL, mm = NULL)
{
url = "http://pub.orcid.org/search/orcid-bio"
url2 <- paste0(url, "/?q=", query)
args <- compact(list(httpAccept = 'application/orcid+xml',
start = start, rows = rows,
defType = defType, qf = qf, bq = bq, mm = mm))
out <- getForm(url2, .params = args)
tt <- xmlParse(out)
toget <- c("orcid", "creation-method", "completion-date", "submission-date",
"claimed", "email-verified", "given-names", "family-name", "external-id-orcid",
"external-id-common-name", "external-id-reference", "external-id-url")
all <- xmlToList(tt)[[1]]
out <- llply(all, function(x) unlist(x, recursive=T))
namefields <- function(x){
temp <- sapply(strsplit(names(x), "\\."), function(y) y[length(y)])
ttt <- data.frame(t(x))
names(ttt) <- temp
ttt
}
out2 <- llply(out, namefields)
df <- do.call(rbind.fill, out2)
df[order(df$`relevancy-score`, decreasing=F),]
}
orcid(query="keyword:ecology", mm = 2)
orcid(query="keyword:ecology+OR+evolution+OR+conservation", mm = 2, rows = 20)
orcid(defType = "edismax", query="keyword:ecology+OR+evolution+OR+conservation", mm = 2, rows = 20)
roxygenise(rorcid)
roxygenise(rorcid)
install_github("rorcid", "ropensci")
library(rorcid)
help(package="rorcid")
library(roxygen2)
rorcid <- "/Users/scottmac2/github/ropensci/rorcid"
roxygenise(rorcid)
rorcid <- "/Users/scottmac2/github/ropensci/rorcid"
install(rorcid)
library(rorcid)
help(package="rorcid")
roxygenise(rorcid)
library(roxygen2)
rorcid <- "/Users/scottmac2/github/ropensci/rorcid"
roxygenise(rorcid)
install(rorcid)
rorcid <- "/Users/scottmac2/github/ropensci/rorcid"
install(rorcid)
help(package="rorcid")
library(roxygen2)
rorcid <- "/Users/scottmac2/github/ropensci/rorcid"
roxygenise(rorcid)
rorcid <- "/Users/scottmac2/github/ropensci/rorcid"
install(rorcid)
help(package="rorcid")
library(roxygen2)
rorcid <- "/Users/scottmac2/github/ropensci/rorcid"
roxygenise(rorcid)
rorcid <- "/Users/scottmac2/github/ropensci/rorcid"
install(rorcid)
help(package="rorcid")
