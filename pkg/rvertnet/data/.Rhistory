library(RCurl)
library(XML)
tt<-getURL("http://www.pubmedcentral.gov/oai/oai.cgi?verb=GetRecord&identifier=oai:pubmedcentral.nih.gov:152494&metadataPrefix=pmc")
tt
getrecord(156895, T, "pmc")
content(GET("http://www.pubmedcentral.gov/oai/oai.cgi?verb=GetRecord&identifier=oai:pubmedcentral.nih.gov:156895&metadataPrefix=pmc"))
GET("http://www.pubmedcentral.gov/oai/oai.cgi?verb=GetRecord&identifier=oai:pubmedcentral.nih.gov:156895&metadataPrefix=pmc")
tt<-getURL("http://www.pubmedcentral.gov/oai/oai.cgi?verb=GetRecord&identifier=oai:pubmedcentral.nih.gov:156895&metadataPrefix=pmc")
tt
xmlParse(tt)
#' identify
#'
#' Learn about the Dryad OAI-PMH service
#' @import OAIHarvester
#' @inheritParams listmetadataformats
#' @export
#' @examples \dontrun{
#' identify()
#' }
identify <- function(transform = TRUE, url = "http://www.pubmedcentral.gov/oai/oai.cgi")
{
oaih_identify(url, transform = transform)
}
identify()
#' Retrieve record headers from the PubMed Central repository.
#'
#' @import OAIHarvester
#' @param from specifies that records returned must have been created/update/deleted
#'     on or after this date.
#' @param until specifies that records returned must have been created/update/deleted
#'     on or before this date.
#' @param set specifies the set that returned records must belong to.
#' @param prefix specifies the metadata format that the records will be
#'     returned in.
#' @param token a token previously provided by the server to resume a request
#'     where it last left off.
#' @inheritParams listmetadataformats
#' @export
#' @examples \dontrun{
#' temp <- listidentifiers(from = '2010-06-01T')
#' listidentifiers(from = '2011-06-01T', until = '2011-07-01T')
#' }
listidentifiers <- function(from = NULL, until = NULL, set = NULL,
prefix = 'oai_dc', token = NULL, transform = TRUE,
url = "http://www.pubmedcentral.gov/oai/oai.cgi")
{
oaih_list_identifiers(
url,
prefix = prefix,
from = from,
until = until,
set = set,
transform = transform)
}
temp <- listidentifiers(from = '2012-06-01T')
temp <- listidentifiers(from = '2012-06-01')
temp <- listidentifiers(from = '2012-07-01')
temp <- listidentifiers(from = '2012-07-29')
temp <- listidentifiers(from = '2012-07-26')
temp
#' List available metadata formats that the PubMed Central repository can disseminate.
#'
#' @import OAIHarvester
#' @param id DataCite identifier, e.g., "56225"
#' @param transform transform metadata to list (TRUE/FALSE)
#' @param prefix The prefix to use, one of: "oa_dc" (Dublin Core metadata format),
#' 		"pmc_fm" (X metadata format), or "pmc" (full text for open access content only)
#' @param url the base url for DataCite (leave to default)
#' @export
#' @examples \dontrun{
#' listmetadataformats()
#' listmetadataformats("56225")
#' }
listmetadataformats <- function(id = NULL, transform = TRUE,
url = "http://www.pubmedcentral.gov/oai/oai.cgi")
{
if(!is.null(id) == T) {oaiid <- paste("oai:pubmedcentral.nih.gov:", id, sep="")} else
{oaiid <- NULL}
oaih_list_metadata_formats(
url,
oaiid,
transform = transform)
}
listmetadataformats()
listmetadataformats("56225")
#' List the records in the PubMed Central metadata repository.
#'
#' @import OAIHarvester
#' @inheritParams listidentifiers
#' @examples \dontrun{
#' listrecords(from = '2011-06-01T', until = '2011-07-01T')
#' out <- listrecords()
#' }
#' @export
listrecords <- function(from = NULL, until = NULL, set = NULL, prefix = 'oai_dc',
token = NULL, transform = TRUE,
url = "http://www.pubmedcentral.gov/oai/oai.cgi")
{
oaih_list_records(
url,
prefix = prefix,
from = from,
until = until,
set = set,
transform = transform)
}
listrecords(from = '2012-06-01', until = '2012-07-01')
listrecords(from = '2012-07-01', until = '2012-07-30')
listrecords(from = '2001-03-22', until = '2001-06-12')
listrecords(from = '2001-03-22', until = '2001-03-35')
listrecords(from = '2001-03-22', until = '2001-03-30')
out <- listrecords(from = '2001-03-22', until = '2001-03-23', transform=F)
out
out[[1]]
out <- listrecords(from = '2001-03-22', until = '2001-03-22', transform=T)
out[1,]
out[2,]
out[3,]
out
nrow(out)
#' Retrieve the set structure of DataCite, useful for selective harvesting.
#'
#' @import OAIHarvester
#' @inheritParams listmetadataformats
#' @examples \dontrun{
#' listsets()
#' }
#' @export
listsets <- function(transform = TRUE,
url = "http://www.pubmedcentral.gov/oai/oai.cgi")
{
oaih_list_sets(url, transform = transform)
}
listsets()
out <- listsets()
nrow(out)
head(out)
out[1,]
out[nrow(out),]
library(httr)
url = "http://www.pubmedcentral.gov/oai/oai.cgi"
from = NULL
until = NULL
set = NULL
prefix = 'oai_dc'
token = NULL
from = '2001-03-22'
until = '2001-03-22'
args <- compact(list(from = from, until = until, set = set, prefix = prefix,
token = token))
args
GET(url, query=args)
url
dev_mode(on=T)
install.packages("httr")
library(httr)
GET(url, query=args)
metadataPrefix = 'oai_dc'
args <- compact(list(from = from, until = until, set = set, metadataPrefix = prefix,
token = token, verb = "ListRecords"))
args
GET(url, query=args)
GET("http://www.pubmedcentral.gov/oai/oai.cgi?from=2001-03-22&until=2001-03-22&metadataPrefix=oai_dc&verb=ListRecords")
dev_mode(on=F)
install.packages(c("NCBI2R", "data.table", "doRNG", "knitcitations", "matrixcalc", "mgcv", "qgraph", "rjson", "robustbase", "stringr"))
#' List the records in the PubMed Central metadata repository.
#'
#' @import OAIHarvester
#' @inheritParams listidentifiers
#' @param prefix The prefix to use, one of: "oa_dc" (Dublin Core metadata format),
#' 		"pmc_fm" (PMC front matter metadata format), or "pmc"
#' 		(full text for open access content only)
#' @examples \dontrun{
#' out <- listrecords(from = '2001-03-22', until = '2001-03-22', transform=T)
#' nrow(out) # number of records
#' out[3,] # a single record
#' }
#' @export
listrecords <- function(from = NULL, until = NULL, set = NULL, prefix = 'oai_dc',
token = NULL, transform = TRUE,
url = "http://www.pubmedcentral.gov/oai/oai.cgi")
{
oaih_list_records(
url,
prefix = prefix,
from = from,
until = until,
set = set,
transform = transform)
}
out <- listrecords(from = '2001-03-22', until = '2001-03-22', transform=T)
nrow(out) # number of records
out[3,] # a single record
out[, "metadata"]
#' mout <- out[, "metadata"]
mout <- out[, "metadata"]
mout[1:3]
mout[[1]]
oaih_transform(mout[[1]])
oaih_transform
require(roxygen2)
roxygenize("/Users/ScottMac/github/rOpenSci/rpmc")
#' Gets all OAI Dryad identifiers.
#' @import RCurl XML
#' @param tor Return list of identifiers to R ('r'), or to your directory
#'    at '~/.' ('dir') (character).
#' @param url the base url for the function (should be left to default).
#' @param ... optional additional curl options (debugging tools mostly)
#' @param curl If using in a loop, call getCurlHandle() first and pass
#'    the returned value in here (avoids unnecessary footprint)
#' @return List of OAI identifiers for each dataset.
#' @export
#' @examples \dontrun{
#' identifiers <- listidentifiers('r')
#'
#' # Data packages
#' identifiers[[1]]
#'
#' # Data files
#' identifiers[[2]]
#' }
listidentifiers <- function(tor, url = "http://www.datadryad.org/oai/request",
..., curl = getCurlHandle()) {
list_ <- list()  # make list to put OIA identifiers into
argspacks <- list(verb = "ListIdentifiers", metadataPrefix = "oai_dc",
set = "hdl_10255_2")  # list of arguments for packages
dryadlistout_packs <- getForm(url, .params = argspacks, ..., curl = curl)
dryad_packs <- xmlTreeParse(dryadlistout_packs)  # tree parse
dryadpackslist <- xmlToList(dryad_packs)[[3]]  # parsed xml to list
if (tor == "r") {
list_[[1]] <- dryadpackslist
} else if (tor == "dir") {
save(dryadpackslist, file = "~/.dryadpackages.rda")
}
argsfiles <- list(verb = "ListIdentifiers", metadataPrefix = "oai_dc",
set = "hdl_10255_3")  # list of arguments for data files within packages
dryadlistout_files <- getForm(url, .params = argsfiles, ..., curl = curl)
dryad_files <- xmlTreeParse(dryadlistout_files)  # tree parse
dryadfileslist <- xmlToList(dryad_files)[[3]]  # parsed xml to list
if (tor == "r") {
list_[[2]] <- dryadfileslist
} else if (tor == "dir") {
save(dryadfileslist, file = "~/.dryadfiles.rda")
}
if (tor == "r")
list_
}
install_github('rpmc', 'ropensci')
with_debug(install_github('rpmc', 'ropensci'))
#' Retrieve the set structure of DataCite, useful for selective harvesting.
#'
#' @import OAIHarvester
#' @inheritParams listmetadataformats
#' @examples \dontrun{
#' out <- listsets()
#' nrow(out); head(out)
#' out[nrow(out),]
#' }
#' @export
listsets <- function(transform = TRUE,
url = "http://www.pubmedcentral.gov/oai/oai.cgi")
{
oaih_list_sets(url, transform = transform)
}
out <- listsets()
install_github("devtools")
library(devtools)
install_github("rpmc", "ropensci")
install_github("rdryad", "ropensci")
install_github("rhindawi", "ropensci")
install_github("rdatacite", "ropensci")
req(list("rpmc","rdryad","rdatacite","rhindawi"))
rpmc::identify()
rdryad::identify()
rhindawi::identify()
rdatacite::identify()
ldply(
rpmc::identify(),
rdatacite::identify(),
rhindawi::identify(),
rdryad::identify()
)
rdatacite::identify()
rdryad::identify()$Identify
rdryad::identify()$Identify
rpmc::identify()
rdatacite::identify()
rhindawi::identify()
ldply(
rpmc::identify(),
rdatacite::identify(),
rhindawi::identify(),
rdryad::identify()$Identify
)
ldply(
rpmc::identify(),
# 		rdatacite::identify(),
rhindawi::identify(),
rdryad::identify()$Identify
)
out1 <- rpmc::identify()
out2 <- rdatacite::identify()
out3 <- rhindawi::identify()
out4 <- rdryad::identify()$Identify
ldply(list(out1, out2, out3, out4))
list(out1, out2, out3, out4)
laply(list(out1, out2, out3, out4), names)
llply(list(out1, out2, out3, out4), names)
data.frame(out1, out2, out3, out4)
data.frame(out1, out2)
data.frame(out1)
out1
matrix(out1)
laply(list(out1, out2, out3, out4), function(x) matrix(x))
ldply(list(out1, out2, out3, out4), function(x) matrix(x))
as.matrix(out1)
laply(list(out1, out2, out3, out4), function(x) as.matrix(x))
ldply(list(out1, out2, out3, out4), function(x) as.matrix(x))
rbind.fill(list(out1, out2, out3, out4))
rbind.fill(out1, out2, out3, out4)
outall <- llply(list(out1, out2, out3, out4), function(x) as.matrix(x))
outall
outall[[1]]
rbind.fill.matrix(outall[[1]], outall[[2]], outall[[3]], outall[[4]])
outall <- llply(list(out1, out2, out3, out4), function(x) data.frame(as.matrix(x))
)
outall
outall <- llply(list(out1, out2, out3, out4), function(x) t(as.matrix(x)))
outall
ldply(list(out1, out2, out3, out4), function(x) t(as.matrix(x)))
outall <- llply(list(out1, out2, out3, out4), function(x) t(as.matrix(x)))
rbind.fill(outall[[1]], outall[[2]], outall[[3]], outall[[4]])
outall[[1]]
do.call(rbind, outall)
do.call(rbind.fill, outall)
do.call(data.frame, outall)
do.call(c, outall)
library(plyr)
plyr::rbind.fill(outall[[1]], outall[[2]], outall[[3]], outall[[4]])
rbind.fill(mtcars[c("mpg", "wt")], mtcars[c("wt", "cyl")])
outall
ncol(outall[[1]])
outall
rbind.fill(outall[[1]][,1:7], outall[[2]][,1:7], outall[[3]][,1:7], outall[[4]][,1:7])
rbind.fill(outall[[1]][,1:4], outall[[2]][,1:4], outall[[3]][,1:4], outall[[4]][,1:4])
outall[[1]]
outall[[1]][,1:4]
outall <- llply(list(out1, out2, out3, out4), function(x) data.frame(t(as.matrix(x))))
outall
rbind.fill(outall[[1]][,1:4], outall[[2]][,1:4], outall[[3]][,1:4], outall[[4]][,1:4])
rbind.fill(outall[[1]], outall[[2]], outall[[3]], outall[[4]])
#' Search across different data providers for article metadata
#'
#' @import OAIHarvester rpmc rdatacite rdryad rhindawi
#' @inheritParams listmetadataformats
#' @examples \dontrun{
#' metadata()
#' }
#' @export
metadata <- function(verb = NULL)
{
out1 <- rpmc::identify()
out2 <- rdatacite::identify()
out3 <- rhindawi::identify()
out4 <- rdryad::identify()$Identify
outall <- llply(list(out1, out2, out3, out4), function(x) data.frame(t(as.matrix(x))))
rbind.fill(outall[[1]], outall[[2]], outall[[3]], outall[[4]])
}
metadata()
#' Identify the OAI-PMH service for each dat provider.
#'
#' @import OAIHarvester rpmc rdatacite rdryad rhindawi
#' @inheritParams listmetadataformats
#' @examples \dontrun{
#' metadata_identify()
#' }
#' @export
metadata_identify <- function()
{
out1 <- rpmc::identify()
out2 <- rdatacite::identify()
out3 <- rhindawi::identify()
out4 <- rdryad::identify()$Identify
outall <- llply(list(out1, out2, out3, out4), function(x) data.frame(t(as.matrix(x))))
rbind.fill(outall[[1]], outall[[2]], outall[[3]], outall[[4]])
}
out1 <- rpmc::listsets()
out1
out2 <- rdatacite::listsets()
out3 <- rhindawi::listsets()
out4 <- rdryad::listsets()
#' Retrieve the set structure of Dryad, useful for selective harvesting.
#'
#' @import OAIHarvester
#' @inheritParams listmetadataformats
#' @examples \dontrun{
#' listsets()
#' }
#' @export
listsets <- function(transform = TRUE,
url = "http://www.datadryad.org/oai/request?verb=ListSets")
{
oaih_list_sets(url, transform = transform)
}
listsets()
library(OAIHarvester)
listsets()
listsets()
listsets
#' Retrieve the set structure of Dryad, useful for selective harvesting.
#'
#' @import OAIHarvester
#' @inheritParams listmetadataformats
#' @examples \dontrun{
#' listsets()
#' }
#' @export
listsets <- function(transform = TRUE,
url = "http://www.datadryad.org/oai/request")
{
oaih_list_sets(url, transform = transform)
}
listsets()
listsets()[1,]
out4 <- rdryad::listsets()
roxygenize("/Users/ScottMac/github/rOpenSci/rdyrad")
library(roxygen2)
roxygenize("/Users/ScottMac/github/rOpenSci/rdyrad")
roxygenize("/Users/ScottMac/github/rOpenSci/rdryad")
install_github('rdryad', 'ropensci')
out4 <- rdryad::listsets()
library(rdryad)
out4 <- rdryad::identify()
out4
out4 <- rdryad::listsets()
install_github('rvertnet', 'ropensci')
library(rvertnet)
verttaxa(t="notropis")
library(roxygen2)
roxygenize("/Users/ScottMac/github/rOpenSci/rvertnet")
install_github('rvetnet', 'ropensci')
install_github('rvertnet', 'ropensci')
library(rvertnet)
dcnames()
dc()
library(rvertnet)
install_github('rgbif', 'ropensci')
library(rgbif)
install_github('rgbif', 'vijaybarve')
library(rgbif)
networks()
occurrencecount(scientificname = 'Helianthus annuus', coordinatestatus = TRUE, year=2005, maxlatitude=20)
vertavailablemaps(q="May or June")
verttaxa(t="notropis")
vertoccurrencecount(t="notropis")
vertoccurrence(t="notropis",num=40)
darwincore_namestypes
darwincore_namestypes()
library(roxygen2)
roxygenize("/Users/ScottMac/github/rOpenSci/rvertnet")
install_github('rvertnet', 'ropensci')
install_github('treebase', 'ropensci')
library(treebase)
?treebase
library(roxygen2)
roxygenize("/Users/ScottMac/github/rOpenSci/rvertnet")
install_github('rvertnet', 'ropensci')
library(rvertnet)
?rvernet
?rvertnet
dc()
data(rvertnet)
data(dc)
dc()
dc
dcnames()
help(package="treebase")
roxygenize("/Users/ScottMac/github/rOpenSci/rvertnet")
library(roxygen2)
roxygenize("/Users/ScottMac/github/rOpenSci/rvertnet")
install_github('rvertnet', 'ropensci')
library(rvertnet)
help(package="rvertnet")
dcnames()
data(dcnames)
dcnames
dcnames()
dat <- read.csv("/Users/ScottMac/github/rOpenSci/rvertnet/data/darwincore_namestypes.csv")
dat
save(dat, "/Users/ScottMac/github/rOpenSci/rvertnet/data/darwincore_namestypes.rda")
save(dat, file="/Users/ScottMac/github/rOpenSci/rvertnet/data/darwincore_namestypes.rda")
save(dat, file="/Users/ScottMac/github/rOpenSci/rvertnet/data/darwincore_namestypes.RData")
setwd("/Users/ScottMac/github/rOpenSci/rvertnet/data/")
dir()
save(dat, file="/Users/ScottMac/github/rOpenSci/rvertnet/demo/darwincore_namestypes.RData")
dc <- read.csv("/Users/ScottMac/github/rOpenSci/rvertnet/data/darwincore_namestypes.csv")
dat
dc
save(dc, file="/Users/ScottMac/github/rOpenSci/rvertnet/data/darwincore_namestypes.rda")
library(ggplotw)
library(ggplot2)
help(package='ggplot2')
save(dc, file="/Users/ScottMac/github/rOpenSci/rvertnet/data/dc.rda")
dc <- read.csv("/Users/ScottMac/github/rOpenSci/rvertnet/data/darwincore_namestypes.csv")
save(dc, file="/Users/ScottMac/github/rOpenSci/rvertnet/data/dc.rda")
dcnames <- read.csv("/Users/ScottMac/github/rOpenSci/rvertnet/data/darwincorenames.csv")
save(dcnames, file="/Users/ScottMac/github/rOpenSci/rvertnet/data/dcnames.rda")
dcdatatypes <- read.csv("/Users/ScottMac/github/rOpenSci/rvertnet/data/darwincore_datatypes.csv")
save(dcnames, file="/Users/ScottMac/github/rOpenSci/rvertnet/data/dcdatatypes.rda")
roxygenize("/Users/ScottMac/github/rOpenSci/rvertnet")
library(roxygen2)
roxygenize("/Users/ScottMac/github/rOpenSci/rvertnet")
